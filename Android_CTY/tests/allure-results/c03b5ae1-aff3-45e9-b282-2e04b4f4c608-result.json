{"name": "test_key", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: The software keyboard cannot be hidden\nStacktrace:\nUnknownError: An unknown server-side error occurred while processing the command. Original error: The software keyboard cannot be hidden\n    at getResponseForW3CError (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/errors.js:1143:9)\n    at asyncHandler (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/protocol.js:487:57)", "trace": "pages = <mobile_project.Android_CTY.conftest.PageFactory object at 0x109f48080>\nuser = {'birthday': '22/03/1997', 'email': '46ac03b24617431d89adf0134734b06e@example.org', 'name': 'Иулиан', 'password': '_nUpCO', ...}\n\n    def test_key(pages,user):\n        pages.onboarding.go_to_reg_page_step_one()\n>       pages.base.send_a_value_to_the_field(RegPageLocatorsStepOne.surname_input, user[\"surname\"])\n\ntest_cty.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../page/base_page.py:24: in send_a_value_to_the_field\n    self.driver.hide_keyboard()\n../../../.venv/lib/python3.12/site-packages/appium/webdriver/extensions/keyboard.py:44: in hide_keyboard\n    self.assert_extension_exists(ext_name).execute_script(\n../../../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x10a92cda0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...asyncHandler (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/protocol.js:487:57)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        https://www.w3.org/TR/webdriver/#errors\n        \"\"\"\n        payload = response.get('value', '')\n        if isinstance(payload, dict):\n            payload_dict = payload\n        else:\n            try:\n                payload_dict = json.loads(payload)\n            except (json.JSONDecodeError, TypeError):\n                return\n            if not isinstance(payload_dict, dict):\n                return\n        value = payload_dict.get('value')\n        if not isinstance(value, dict):\n            return\n        error = value.get('error')\n        if not error:\n            return\n    \n        message = value.get('message', error)\n        stacktrace = value.get('stacktrace', '')\n        # In theory, we should also be checking HTTP status codes.\n        # Java client, for example, prints a warning if the actual `error`\n        # value does not match to the response's HTTP status code.\n        exception_class: Type[sel_exceptions.WebDriverException] = ERROR_TO_EXC_MAPPING.get(\n            error, sel_exceptions.WebDriverException\n        )\n        if exception_class is sel_exceptions.WebDriverException and message:\n            if message == 'No such context found.':\n                exception_class = appium_exceptions.NoSuchContextException\n            elif message == 'That command could not be executed in the current context.':\n                exception_class = appium_exceptions.InvalidSwitchToTargetException\n    \n        if exception_class is sel_exceptions.UnexpectedAlertPresentException:\n            raise sel_exceptions.UnexpectedAlertPresentException(\n                msg=message,\n                stacktrace=format_stacktrace(stacktrace),\n                alert_text=value.get('data'),\n            )\n>       raise exception_class(msg=message, stacktrace=format_stacktrace(stacktrace))\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: The software keyboard cannot be hidden\nE       Stacktrace:\nE       UnknownError: An unknown server-side error occurred while processing the command. Original error: The software keyboard cannot be hidden\nE           at getResponseForW3CError (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/errors.js:1143:9)\nE           at asyncHandler (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/protocol.js:487:57)\n\n../../../.venv/lib/python3.12/site-packages/appium/webdriver/errorhandler.py:125: WebDriverException"}, "start": 1761594138925, "stop": 1761594162602, "uuid": "02df40f0-d041-4df8-a8e8-44e2571e0e18", "historyId": "3e74c500b42eeb501eb8c468f145590b", "testCaseId": "3e74c500b42eeb501eb8c468f145590b", "fullName": "Android_CTY.tests.test_cty#test_key", "labels": [{"name": "parentSuite", "value": "Android_CTY.tests"}, {"name": "suite", "value": "test_cty"}, {"name": "host", "value": "MacBook-Pro-Evgenij.local"}, {"name": "thread", "value": "8763-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Android_CTY.tests.test_cty"}]}